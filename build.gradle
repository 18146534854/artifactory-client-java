import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url 'http://repo.jfrog.org/artifactory/gradle-plugins' }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.16')
        classpath(group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.2-rc1')
    }
}

def globalVersion = new Version(currentVersion)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'artifactory'

    artifactory {
        contextUrl = 'https://oss.jfrog.org'
        //The base Artifactory URL if not overridden by the publisher/resolver
        resolve {
            repository {
                repoKey = 'libs-releases'
                maven = true
            }
        }
        publish {
            repository {
                repoKey = 'oss-snaphost-local'   //The Artifactory repository key to publish to
                username = "$System.env.ARTIFACTORY_USERNAME"          //The publisher user name
                password = "$System.env.ARTIFACTORY_PASSWORD"       //The publisher password
            }
        }
    }

    group = 'com.jfrog.artifactory.client'
    version = globalVersion
    status = version.status

    project.tasks.withType(Jar).each {
        it.version = currentVersion
    }

}


subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    jar.dependsOn sourceJar

    artifacts {
        archives sourceJar, jar
    }

    test {
        useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
        wildcards += '?*.gradle'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                // Use git
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}
